definitions:
  device.DeviceInfo:
    properties:
      brand:
        type: string
      deviceId:
        type: string
      modelName:
        type: string
      platform:
        type: string
    type: object
  dto.ChangeOwnerDto:
    properties:
      newOwnerUuid:
        type: string
      vehicleUuid:
        type: string
    required:
    - newOwnerUuid
    - vehicleUuid
    type: object
  dto.DeviceLoginResponse:
    properties:
      accessToken:
        type: string
      deviceToken:
        type: string
      refreshToken:
        type: string
    type: object
  dto.DriverLicenseDto:
    properties:
      category:
        type: string
      expiringDate:
        type: string
      issueDate:
        type: string
      licenseNumber:
        type: string
      uuid:
        type: string
    type: object
  dto.LoginDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.MobileRegisterDto:
    properties:
      deviceInfo:
        $ref: '#/definitions/device.DeviceInfo'
      email:
        type: string
      password:
        type: string
    required:
    - deviceInfo
    - email
    - password
    type: object
  dto.NewUserDto:
    properties:
      birthDate:
        type: string
      email:
        type: string
      firstName:
        maxLength: 100
        minLength: 2
        type: string
      lastName:
        maxLength: 100
        minLength: 2
        type: string
      oib:
        type: string
      password:
        minLength: 6
        type: string
      policeToken:
        type: string
      residence:
        maxLength: 255
        type: string
      role:
        enum:
        - hak
        - mupadmin
        - osoba
        - firma
        - policija
        - superadmin
        type: string
      uuid:
        type: string
    required:
    - birthDate
    - email
    - firstName
    - lastName
    - oib
    - password
    - residence
    - role
    type: object
  dto.NewVehicleDto:
    properties:
      ownerUuid:
        type: string
      registration:
        type: string
      summary:
        $ref: '#/definitions/dto.VehicleSummary'
      traveledDistance:
        type: integer
    type: object
  dto.PoliceRegisterDto:
    properties:
      code:
        type: string
      deviceInfo:
        $ref: '#/definitions/device.DeviceInfo'
    required:
    - deviceInfo
    type: object
  dto.RefreshDto:
    properties:
      refreshToken:
        type: string
    type: object
  dto.RegistrationDto:
    properties:
      note:
        type: string
      passTechnical:
        type: boolean
      registration:
        type: string
      technicalDate:
        type: string
      traveledDistance:
        type: integer
    type: object
  dto.TokenDto:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  dto.UserDto:
    properties:
      birthDate:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      oib:
        type: string
      policeToken:
        type: string
      residence:
        type: string
      role:
        type: string
      uuid:
        type: string
    type: object
  dto.VehicleDetailsDto:
    properties:
      drivers:
        items:
          $ref: '#/definitions/dto.UserDto'
        type: array
      owner:
        $ref: '#/definitions/dto.UserDto'
      pastOwners:
        items:
          $ref: '#/definitions/dto.UserDto'
        type: array
      pastRegistration:
        items:
          $ref: '#/definitions/dto.RegistrationDto'
        type: array
      registration:
        type: string
      summary:
        $ref: '#/definitions/dto.VehicleSummary'
      uuid:
        type: string
    type: object
  dto.VehicleDto:
    properties:
      allowedTo:
        description: 'NOTE: can be date or empty if empty then it is allowed forever'
        type: string
      model:
        type: string
      registration:
        type: string
      uuid:
        type: string
      vehicleType:
        type: string
    type: object
  dto.VehicleSummary:
    properties:
      additionalTireSizes:
        description: Dodatne dimenzije guma // (15)
        type: string
      bodyShape:
        description: Oblik karoserije // (2)
        type: string
      chassisNumber:
        description: Broj šasije // E
        type: string
      co2Emissions:
        description: Emisija CO2 // V7
        type: string
      colourOfVehicle:
        description: Boja vozila // R
        type: string
      dateFirstRegistration:
        description: Datum prve registracije // B
        type: string
      ecCategory:
        description: EC kategorija // V9
        type: string
      engineCapacity:
        description: Obujam motora // P1
        type: string
      enginePower:
        description: Snaga motora // P2
        type: string
      engineSpeedForStationaryNoiseTest:
        description: Broj okretaja motora pri ispitivanju buke u stacionarnom stanju
          // U2
        type: string
      firstRegistrationInCroatia:
        description: Prva registracija u Hrvatskoj // (4)
        type: string
      fuelOrPowerSource:
        description: Gorivo ili izvor energije // P3
        type: string
      height:
        description: Visina // (8)
        type: string
      homologationType:
        description: Homologacijski tip // D2
        type: string
      length:
        description: Dužina // (6)
        type: string
      mark:
        description: Marka // D1
        type: string
      maximumNetPower:
        description: Najveća neto snaga // T
        type: string
      mb:
        description: 'MB (pretpostavka: proizvođač) // (13)'
        type: string
      model:
        description: Model // (14)
        type: string
      numberOfAxles:
        description: Broj osovina // L
        type: string
      numberOfDrivenAxles:
        description: Broj pogonskih osovina // (9)
        type: string
      numberOfSeats:
        description: Broj sjedala // S1
        type: string
      permissibleMaximumLadenMass:
        description: Dopuštena najveća masa // F2
        type: string
      permissiblePayload:
        description: Dopuštena nosivost // (5)
        type: string
      ratedEngineSpeed:
        description: Nazivni broj okretaja motora // P4
        type: string
      stationaryNoiseLevel:
        description: Razina buke u stacionarnom stanju // U1
        type: string
      technicallyPermissibleMaximumLadenMass:
        description: Tehnički dopuštena najveća masa // F1
        type: string
      tireSize:
        description: Dimenzije guma // (11)
        type: string
      tradeName:
        description: Trgovački naziv // D3
        type: string
      typeApprovalNumber:
        description: Broj homologacije // K
        type: string
      uniqueModelCode:
        description: Jedinstvena oznaka modela // (12)
        type: string
      unladenMass:
        description: Masa praznog vozila // G
        type: string
      vehicleCategory:
        description: Kategorija vozila // J
        type: string
      vehicleType:
        description: Tip vozila (16) // (16)
        type: string
      vehicleUse:
        description: Namjena vozila // (3)
        type: string
      width:
        description: Širina // (7)
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: loginDto
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenDto'
      summary: User login
      tags:
      - auth
  /auth/police/register:
    post:
      consumes:
      - application/json
      description: Authenticates a police officer on a mobile device and registers
        the device
      parameters:
      - description: Police login credentials
        in: body
        name: mobileLoginDto
        required: true
        schema:
          $ref: '#/definitions/dto.PoliceRegisterDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeviceLoginResponse'
      summary: Police login
      tags:
      - auth
  /auth/refresh:
    post:
      description: Generates a new access token using a valid refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: refreshToken
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenDto'
      summary: Refresh Access Token
      tags:
      - auth
  /auth/user/register:
    post:
      consumes:
      - application/json
      description: Authenticates a user on a mobile device and registers the device
      parameters:
      - description: Mobile login credentials
        in: body
        name: mobileLoginDto
        required: true
        schema:
          $ref: '#/definitions/dto.MobileRegisterDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeviceLoginResponse'
      summary: Mobile login with device registration
      tags:
      - auth
  /license:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.DriverLicenseDto'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets your licenses
      tags:
      - license
    post:
      description: Create a new license with an owner
      parameters:
      - description: License model
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.DriverLicenseDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.DriverLicenseDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Creates a new license
      tags:
      - license
  /license/{uuid}:
    delete:
      parameters:
      - description: License UUID
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Deletes a license
      tags:
      - license
    get:
      parameters:
      - description: License UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DriverLicenseDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets a license with uuid
      tags:
      - license
    put:
      parameters:
      - description: License UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: License model
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.DriverLicenseDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DriverLicenseDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Updates a license
      tags:
      - license
  /user:
    post:
      parameters:
      - description: Data for new user
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.NewUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Create new user
      tags:
      - user
  /user/{uuid}:
    delete:
      description: delete a user with uuid
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: delete user with uuid
      tags:
      - user
    get:
      description: get a user with uuid
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: get user with uuid
      tags:
      - user
    put:
      parameters:
      - description: uuid of user to be updated
        in: path
        name: uuid
        required: true
        type: string
      - description: Data for updating user
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update user with new dat
      tags:
      - user
  /user/{uuid}/generate-token:
    post:
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Generate a new police token for a user
      tags:
      - user
  /user/{uuid}/police-token:
    patch:
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Police token
        in: body
        name: model
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Set police token for a user
      tags:
      - user
  /user/all-users:
    get:
      description: Fetches all users for superadmin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserDto'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Get all users for superadmin
      tags:
      - user
  /user/my-data:
    get:
      description: Fetches the currently logged-in user's data based on the JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get logged-in user data
      tags:
      - user
  /user/oib/{oib}:
    get:
      description: get a user with oib
      parameters:
      - description: user oib
        in: path
        name: oib
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: get user with oib
      tags:
      - user
  /user/police-officers:
    get:
      description: Fetches all police officers for MUP Admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserDto'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Get all police officers for MUP Admin
      tags:
      - user
  /user/search:
    get:
      description: Performs a fuzzy search for users by first name, last name, or
        full name with similarity matching
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserDto'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Search users by name
      tags:
      - user
  /vehicle:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.VehicleDto'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets your vehicles
      tags:
      - vehicle
    post:
      description: Create new vehicle with an owner
      parameters:
      - description: Vehicle model
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.NewVehicleDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.VehicleDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Creates new vehicle
      tags:
      - vehicle
  /vehicle/{uuid}:
    delete:
      description: Preforms a soft delete
      parameters:
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Soft delete on vehicle
      tags:
      - vehicle
    get:
      parameters:
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleDetailsDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets a vehicle with uuid
      tags:
      - vehicle
    put:
      description: Will allow to update some wehicle data
      parameters:
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Vehicle data to update
        in: body
        name: vehicle
        required: true
        schema:
          $ref: '#/definitions/dto.VehicleDetailsDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update vehicle data
      tags:
      - vehicle
  /vehicle/change-owner:
    put:
      parameters:
      - description: Dto for changing ownership
        in: body
        name: changeOwnerDto
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeOwnerDto'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: changes owner to new owner with uuid
      tags:
      - vehicle
  /vehicle/deregister/{uuid}:
    put:
      description: Sets the vehicle's license plate to null
      parameters:
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Deregister a vehicle by setting its license plate to null
      tags:
      - vehicle
  /vehicle/registration/{uuid}:
    put:
      consumes:
      - application/json
      description: Performs a technical inspection and registers a vehicle.
      parameters:
      - description: Vehicle UUID
        format: uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Data for vehicle registration
        in: body
        name: registrationData
        required: true
        schema:
          $ref: '#/definitions/dto.RegistrationDto'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered
        "400":
          description: Invalid request (bad UUID, binding error)
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Vehicle not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Tehnicki pregled
      tags:
      - vehicle
  /vehicle/vin/{vin}:
    get:
      parameters:
      - description: Vehicle VIN number
        in: path
        name: vin
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleDetailsDto'
        "400":
          description: Invalid request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Vehicle not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Gets a vehicle by VIN number
      tags:
      - vehicle
swagger: "2.0"
