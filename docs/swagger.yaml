definitions:
  dto.DriverLicenseDto:
    properties:
      category:
        type: string
      expiringDate:
        type: string
      issueDate:
        type: string
      licenseNumber:
        type: string
      uuid:
        type: string
    type: object
  dto.LoginDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.NewUserDto:
    properties:
      birthDate:
        type: string
      email:
        type: string
      firstName:
        maxLength: 100
        minLength: 2
        type: string
      lastName:
        maxLength: 100
        minLength: 2
        type: string
      oib:
        type: string
      password:
        minLength: 6
        type: string
      residence:
        maxLength: 255
        type: string
      role:
        enum:
        - hak
        - mupadmin
        - osoba
        - firma
        - policija
        - superadmin
        type: string
      uuid:
        type: string
    required:
    - birthDate
    - email
    - firstName
    - lastName
    - oib
    - password
    - residence
    - role
    type: object
  dto.NewVehicleDto:
    properties:
      chassisNumber:
        type: string
      ownerUuid:
        type: string
      productionYear:
        type: integer
      registration:
        type: string
      traveledDistance:
        type: integer
      vehicleModel:
        type: string
      vehicleType:
        type: string
    type: object
  dto.TokenDto:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  dto.UserDto:
    properties:
      birthDate:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      oib:
        type: string
      residence:
        type: string
      role:
        type: string
      uuid:
        type: string
    type: object
  dto.VehicleDetailsDto:
    properties:
      drivers:
        items:
          $ref: '#/definitions/dto.UserDto'
        type: array
      owner:
        $ref: '#/definitions/dto.UserDto'
      pastOwners:
        items:
          $ref: '#/definitions/dto.UserDto'
        type: array
      productionYear:
        type: integer
      registration:
        type: string
      uuid:
        type: string
      vehicleModel:
        type: string
      vehicleType:
        type: string
    type: object
  dto.VehicleDto:
    properties:
      productionYear:
        type: integer
      registration:
        type: string
      uuid:
        type: string
      vehicleModel:
        type: string
      vehicleType:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: loginDto
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenDto'
      summary: User login
      tags:
      - auth
  /auth/refresh:
    post:
      description: Generates a new access token using a valid refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: refreshToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenDto'
      summary: Refresh Access Token
      tags:
      - auth
  /license:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.DriverLicenseDto'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets your licenses
      tags:
      - license
    post:
      description: Create a new license with an owner
      parameters:
      - description: License model
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.DriverLicenseDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.DriverLicenseDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Creates a new license
      tags:
      - license
  /license/{uuid}:
    delete:
      parameters:
      - description: License UUID
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Deletes a license
      tags:
      - license
    get:
      parameters:
      - description: License UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DriverLicenseDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets a license with uuid
      tags:
      - license
    put:
      parameters:
      - description: License UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: License model
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.DriverLicenseDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DriverLicenseDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Updates a license
      tags:
      - license
  /user:
    post:
      parameters:
      - description: Data for new user
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.NewUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Create new user
      tags:
      - user
  /user/{uuid}:
    delete:
      description: delete a user with uuid
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: delete user with uuid
      tags:
      - user
    get:
      description: get a user with uuid
      parameters:
      - description: user uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: get user with uuid
      tags:
      - user
    put:
      parameters:
      - description: uuid of user to be updated
        in: path
        name: uuid
        required: true
        type: string
      - description: Data for updating user
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update user with new dat
      tags:
      - user
  /user/all-users:
    get:
      description: Fetches all users for superadmin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserDto'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Get all users for superadmin
      tags:
      - user
  /user/my-data:
    get:
      description: Fetches the currently logged-in user's data based on the JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDto'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get logged-in user data
      tags:
      - user
  /user/police-officers:
    get:
      description: Fetches all police officers for MUP Admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserDto'
            type: array
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Get all police officers for MUP Admin
      tags:
      - user
  /vehicle:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.VehicleDto'
            type: array
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets your vehicles
      tags:
      - vehicle
    post:
      description: Create new vehicle with an owner
      parameters:
      - description: Vehicle model
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/dto.NewVehicleDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.VehicleDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Creates new vehicle
      tags:
      - vehicle
  /vehicle/{uuid}:
    delete:
      description: Preforms a soft delete
      parameters:
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Soft delete on vehicle
      tags:
      - vehicle
    get:
      parameters:
      - description: Vehicle UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VehicleDetailsDto'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Gets a vehicle with uuid
      tags:
      - vehicle
swagger: "2.0"
