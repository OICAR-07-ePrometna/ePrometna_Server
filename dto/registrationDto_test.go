package dto_test

import (
	"ePrometna_Server/dto"
	"ePrometna_Server/model"
	"testing"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
)

func TestRegistrationDto_ToModel(t *testing.T) {
	tests := []struct {
		name    string
		dto     dto.RegistrationDto
		want    model.RegistrationInfo // Uuid will be generated, compare other fields
		wantErr bool
	}{
		{
			name: "Valid DTO to Model",
			dto: dto.RegistrationDto{
				PassTechnical:    true,
				TraveledDistance: 75000,
				Registration:     "RI5678CD",
				Note:             "Regular checkup",
			},
			want: model.RegistrationInfo{
				// Uuid is generated by ToModel
				PassTechnical:    true,
				TraveledDistance: 75000,
				Registration:     "RI5678CD",
				Note:             func(s string) *string { return &s }("Regular checkup"),
				// TechnicalDate is set by service, not DTO
			},
			wantErr: false,
		},
		{
			name: "Valid DTO to Model - Empty Note",
			dto: dto.RegistrationDto{
				PassTechnical:    false,
				TraveledDistance: 120000,
				Registration:     "PU9012EF",
				Note:             "", // Empty note
			},
			want: model.RegistrationInfo{
				PassTechnical:    false,
				TraveledDistance: 120000,
				Registration:     "PU9012EF",
				Note:             func(s string) *string { return &s }(""),
			},
			wantErr: false,
		},
		// ToModel for RegistrationDto is straightforward and doesn't have explicit error returns.
		// Error handling would typically be for data validation if added.
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.dto.ToModel()

			if tt.wantErr {
				assert.Error(t, err)
				// If ToModel could return an error, check for nil 'got'
			} else {
				assert.NoError(t, err)
				assert.NotEqual(t, uuid.Nil, got.Uuid, "RegistrationInfo UUID should be generated")
				assert.Equal(t, tt.want.PassTechnical, got.PassTechnical)
				assert.Equal(t, tt.want.TraveledDistance, got.TraveledDistance)
				assert.Equal(t, tt.want.Registration, got.Registration)
				if tt.want.Note == nil {
					assert.Nil(t, got.Note)
				} else {
					assert.NotNil(t, got.Note)
					assert.Equal(t, *tt.want.Note, *got.Note)
				}
				// TechnicalDate is not set by ToModel, so not compared here.
			}
		})
	}
}
