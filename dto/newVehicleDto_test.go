package dto_test

import (
	"ePrometna_Server/dto"
	"ePrometna_Server/model"
	"testing"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"
)

func TestNewVehicleDto_ToModel(t *testing.T) {
	tests := []struct {
		name    string
		dto     dto.NewVehicleDto
		want    *model.Vehicle // Uuid and Registration.Uuid will be generated, compare other fields
		wantErr bool
	}{
		{
			name: "Valid DTO to Model",
			dto: dto.NewVehicleDto{
				OwnerUuid:        uuid.New().String(), // Not directly used by ToModel, but part of DTO
				Registration:     "ZG1234AA",
				TraveledDistance: 15000,
				Summary: dto.VehicleSummary{
					VehicleType:   "Car",
					Model:         "Civic",
					ChassisNumber: "CHASSIS123",
					// Add more summary fields if necessary for a complete test
					Mark:                  "Honda",
					DateFirstRegistration: "2020-05-01",
				},
			},
			want: &model.Vehicle{
				// Uuid is generated by ToModel
				VehicleType:           "Car",
				VehicleModel:          "Civic",
				ChassisNumber:         "CHASSIS123",
				Mark:                  "Honda",
				DateFirstRegistration: "2020-05-01",
				Registration: &model.RegistrationInfo{
					// Uuid is generated by ToModel
					PassTechnical:    true, // Defaulted in ToModel
					TraveledDistance: 15000,
					Registration:     "ZG1234AA",
					// TechnicalDate is set by service, not DTO
				},
				// Other summary fields from DTO would be mapped here
			},
			wantErr: false,
		},
		// Add more test cases if there are specific validation/error paths in ToModel
		// For NewVehicleDto, ToModel is straightforward mapping and UUID generation.
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.dto.ToModel()

			if tt.wantErr {
				assert.Error(t, err)
				assert.Nil(t, got)
			} else {
				assert.NoError(t, err)
				assert.NotNil(t, got)
				assert.NotEqual(t, uuid.Nil, got.Uuid, "Vehicle UUID should be generated")

				// Compare basic vehicle fields
				assert.Equal(t, tt.want.VehicleType, got.VehicleType)
				assert.Equal(t, tt.want.VehicleModel, got.VehicleModel)
				assert.Equal(t, tt.want.ChassisNumber, got.ChassisNumber)
				assert.Equal(t, tt.want.Mark, got.Mark)
				assert.Equal(t, tt.want.DateFirstRegistration, got.DateFirstRegistration)

				// Compare initial registration info
				assert.NotNil(t, got.Registration)
				if got.Registration != nil {
					assert.NotEqual(t, uuid.Nil, got.Registration.Uuid, "RegistrationInfo UUID should be generated")
					assert.Equal(t, tt.want.Registration.PassTechnical, got.Registration.PassTechnical)
					assert.Equal(t, tt.want.Registration.TraveledDistance, got.Registration.TraveledDistance)
					assert.Equal(t, tt.want.Registration.Registration, got.Registration.Registration)
				}
			}
		})
	}
}
